package johnnylam_samnav;
import robocode.*;
import robocode.util.Utils;
import java.awt.Color;
import java.awt.geom.*; 
/**
 * Cloud - a robot by (Sam Navarrete & Johnny Lam)
 * STRONG 1V1, TERRIBLE AT MELEE
 * heading - absolute angle in degrees with 0 facing up the screen, positive clockwise. 0 <= heading < 360. 
 * bearing - relative angle to some object from your robot's heading, positive clockwise. -180 < bearing <= 180 
 */
public class Cloud9 extends AdvancedRobot
{		
	boolean movingForward;
	static double oldEnemyHeading; //keep static so we can keep track each scan
	static double prevEnergy = 100.0;		
	static int stuck;// if get caught in a corner nonstop, gets out after 5 hits(should work
	/**
	 * run: Cloud9's default behavior
	 * Cloud9 movement acts like a timer that swings far and rewinds step by step back & repeats
	 */

	public void run() {
		// Initialization of the robot should be put here

		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);
		setColors(Color.cyan,Color.blue,Color.green); // body,gun,radar
		turnRight(75);
		ahead(80);
		// Robot main loop
		while(true) {	
		ahead(150); //set high 150 & 300 for more mobility
		turnRadarRightRadians(Double.POSITIVE_INFINITY);
		back(300);
		turnRadarRightRadians(Double.POSITIVE_INFINITY);
		}
	}

	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {

	//typical stop and go, from wiki******
	//energy monitoring so if  they fire, we stop, and if they don't we move

 	if(getDistanceRemaining()==0.0 && prevEnergy-e.getEnergy()>0.0){
    setAhead(45);
  	}
	prevEnergy = e.getEnergy();
	//turn car perpendicular so we can start strafing 
	setTurnRight(e.getBearing() + 90);
	
	//circular prediction
	//bulletpower pick either 3 or what the energy is
	double bulletPower = Math.min(3.0,getEnergy());
	//get coordinates
	double myX = getX();
	double myY = getY();
	//enemy last seen location
	double absoluteBearing = getHeadingRadians() + e.getBearingRadians();

	//get enemy's cartesian coordinates
	double enemyX = getX() + e.getDistance() * Math.sin(absoluteBearing);
	double enemyY = getY() + e.getDistance() * Math.cos(absoluteBearing);
	//enemy heading
	double enemyHeading = e.getHeadingRadians();
	double enemyHeadingChange = enemyHeading - oldEnemyHeading;
	//update oldEnemyHeading from last scan
	oldEnemyHeading = enemyHeading;
	double enemyVelocity = e.getVelocity();
	
	double deltaTime = 0;
	double battleFieldHeight = getBattleFieldHeight(), 
	       battleFieldWidth = getBattleFieldWidth();
	// assign predictedX/Y from enemy coordinates
	double predictedX = enemyX, predictedY = enemyY;
	//point2d.distance is use to calcualte the distance between two coordinates
	//taken from wiki*** about circular targetting which can also work w/ linear, 
	//formula to predict 
	while((++deltaTime) * (20.0 - 3.0 * bulletPower) < Point2D.Double.distance(myX, myY, predictedX, predictedY)){		
		//predicts position by calculating velocity vector and update coordinate
		predictedX += Math.sin(enemyHeading) * enemyVelocity;
		predictedY += Math.cos(enemyHeading) * enemyVelocity;
		enemyHeading += enemyHeadingChange;
		
		if(	predictedX < 18.0 || predictedY < 18.0 || predictedX > battleFieldWidth - 18.0 || predictedY > battleFieldHeight - 18.0){
			predictedX = Math.min(Math.max(18.0, predictedX), 
			    battleFieldWidth - 18.0);	
			predictedY = Math.min(Math.max(18.0, predictedY), 
			    battleFieldHeight - 18.0);
			break;
			}
		
		}
	double degree = Utils.normalAbsoluteAngle(Math.atan2(predictedX - getX(), predictedY - getY()));
	
	//turn gun and radar
	//gun uses head on targetting
	setTurnGunRightRadians(Utils.normalRelativeAngle(degree - getGunHeadingRadians()));
	setTurnRadarRightRadians(Utils.normalRelativeAngle( absoluteBearing - getRadarHeadingRadians()));
	
		if(e.getDistance() < 200){ // the the enemy is further than 200p
		        setFire(3); // fire full power
				}
	 	else if(e.getDistance() < 400){
		        setFire(2.7); // else fire 2
				}
		else{
				setFire(2); // else fire 2 SPRAY & PRAY
		}
	
	}

	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
	  
		reverseDirection(); // bounces off when we hit wall
		stuck++;
		if(stuck > 5){
			turnRight(45); // get us out of trapped corner
		}
	}
	public void reverseDirection() {
		if (movingForward) {
			
			back(150); //swing us back
			movingForward = false;	
		} else {	
			
			ahead(150); //swing us forward for more room to strafe
			movingForward = true;
		}
	}	

}
