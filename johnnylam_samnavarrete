package myrobot;
import robocode.*;
import robocode.util.Utils;
import java.awt.Color;
import java.awt.geom.*;
/**
 * C9Robot - a robot by (your name here)
 */
public class C9Robot extends AdvancedRobot
{		
	private String targ; // what robot to target because they shot at us
	boolean movingForward;
	static double oldEnemyHeading;
	static double prevEnergy = 100.0;
					
	static double xForce;
	static double yForce;
	static double lastDistance;
	/**
	 * run: C9Robot's default behavior
	 */

	public void run() {
		// Initialization of the robot should be put here
	 
		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);
		setColors(Color.cyan,Color.blue,Color.green); // body,gun,radar
		turnRight(75);
		ahead(80);
		// Robot main loop
		while(true) {
				
		turnRadarRightRadians(Double.POSITIVE_INFINITY);
		ahead(200);
		turnRadarRightRadians(Double.POSITIVE_INFINITY);
		back(200);
		}
	}

	/**
	 * onScannedRobot: What to do when you see another robot
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
	double direction = 1;
	//circular prediction
	double bulletPower = Math.min(3.0,getEnergy());
	double myX = getX();
	double myY = getY();
	double absoluteBearing = getHeadingRadians() + e.getBearingRadians();
	double enemyX = getX() + e.getDistance() * Math.sin(absoluteBearing);
	double enemyY = getY() + e.getDistance() * Math.cos(absoluteBearing);
	double enemyHeading = e.getHeadingRadians();
	double enemyHeadingChange = enemyHeading - oldEnemyHeading;
	double enemyVelocity = e.getVelocity();
	oldEnemyHeading = enemyHeading;
	 
	double deltaTime = 0;
	double battleFieldHeight = getBattleFieldHeight(), 
	       battleFieldWidth = getBattleFieldWidth();
	double predictedX = enemyX, predictedY = enemyY;
	while((++deltaTime) * (20.0 - 3.0 * bulletPower) < 
	      Point2D.Double.distance(myX, myY, predictedX, predictedY)){		
		predictedX += Math.sin(enemyHeading) * enemyVelocity;
		predictedY += Math.cos(enemyHeading) * enemyVelocity;
		enemyHeading += enemyHeadingChange;
		if(	predictedX < 18.0 
			|| predictedY < 18.0
			|| predictedX > battleFieldWidth - 18.0
			|| predictedY > battleFieldHeight - 18.0){
	 
			predictedX = Math.min(Math.max(18.0, predictedX), 
			    battleFieldWidth - 18.0);	
			predictedY = Math.min(Math.max(18.0, predictedY), 
			    battleFieldHeight - 18.0);
			break;
		}
	}
	double theta = Utils.normalAbsoluteAngle(Math.atan2(
	    predictedX - getX(), predictedY - getY()));
setTurnRadarRightRadians(Utils.normalRelativeAngle(
    absoluteBearing - getRadarHeadingRadians()));
setTurnGunRightRadians(Utils.normalRelativeAngle(
    theta - getGunHeadingRadians()));
	//stop and go
	//energy monitoring
  if(getDistanceRemaining()==0.0 && prevEnergy-e.getEnergy()>0.0){
    setAhead(36*direction);
  }
  prevEnergy = e.getEnergy();
	if(targ == null){
	targ= e.getName();
	}
	if(e.getDistance() > 300){
	targ=e.getName();
	}
	if(e.getDistance() < 200){ // the the enemy is further than 200p
	        setFire(3); // fire full power
			}
 	else if(e.getDistance() < 400){
	        setFire(2.7); // else fire 2
			}
	else{
			setFire(1.5); // else fire 1 SPRAY & PRAY
		}

	
}
	/**
	 * onHitByBullet: What to do when you're hit by a bullet
	 */
	public void onHitByBullet(HitByBulletEvent e) {
		targ = e.getName();// acquire target last hit us
	}
	
	/**
	 * onHitWall: What to do when you hit a wall
	 */
	public void onHitWall(HitWallEvent e) {
		
		reverseDirection(); // bounces off when we hit wall
	}
	public void reverseDirection() {
		if (movingForward) {
			back(100);
			movingForward = false;
		} else {	
			setAhead(100);
			movingForward = true;
		}
	}	

}
